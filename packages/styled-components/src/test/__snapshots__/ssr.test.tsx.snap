// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ssr should add a nonce to the stylesheet if webpack nonce is detected in the global scope 1`] = `
<h1 class="sc-b c">
  Hello SSR!
</h1>
`;

exports[`ssr should add a nonce to the stylesheet if webpack nonce is detected in the global scope 2`] = `
<style nonce="foo"
       data-styled="true"
       data-styled-version="JEST_MOCK_VERSION"
>
  body{background:papayawhip;}/*!sc*/
data-styled.g1[id="sc-global-a1"]{content:"sc-global-a1,"}/*!sc*/
.c{color:red;}/*!sc*/
data-styled.g2[id="sc-b"]{content:"c,"}/*!sc*/
</style>
`;

exports[`ssr should extract both global and local CSS 1`] = `
<h1 class="sc-b c">
  Hello SSR!
</h1>
`;

exports[`ssr should extract both global and local CSS 2`] = `
<style data-styled="true"
       data-styled-version="JEST_MOCK_VERSION"
>
  body{background:papayawhip;}/*!sc*/
data-styled.g1[id="sc-global-a1"]{content:"sc-global-a1,"}/*!sc*/
.c{color:red;}/*!sc*/
data-styled.g2[id="sc-b"]{content:"c,"}/*!sc*/
</style>
`;

exports[`ssr should extract the CSS in a simple case 1`] = `
<h1 class="sc-a b">
  Hello SSR!
</h1>
`;

exports[`ssr should extract the CSS in a simple case 2`] = `
<style data-styled="true"
       data-styled-version="JEST_MOCK_VERSION"
>
  .b{color:red;}/*!sc*/
data-styled.g1[id="sc-a"]{content:"b,"}/*!sc*/
</style>
`;

exports[`ssr should handle errors while streaming 1`] = `[Error: React.Children.only expected to receive a single React element child.]`;

exports[`ssr should interleave styles with rendered HTML when utilitizing streaming 1`] = `
<style data-styled="true"
       data-styled-version="JEST_MOCK_VERSION"
>
  body{background:papayawhip;}/*!sc*/
data-styled.g1[id="sc-global-a1"]{content:"sc-global-a1,"}/*!sc*/
.c{color:red;}/*!sc*/
data-styled.g2[id="sc-b"]{content:"c,"}/*!sc*/
</style>
<h1 class="sc-b c">
  Hello SSR!
</h1>
`;

exports[`ssr should render CSS in the order the components were defined, not rendered 1`] = `
<div>
  <h2 class="TWO a">
  </h2>
  <h1 class="ONE b">
  </h1>
</div>
`;

exports[`ssr should render CSS in the order the components were defined, not rendered 2`] = `
<style data-styled="true"
       data-styled-version="JEST_MOCK_VERSION"
>
  .b{color:red;}/*!sc*/
data-styled.g1[id="ONE"]{content:"b,"}/*!sc*/
.a{color:blue;}/*!sc*/
data-styled.g2[id="TWO"]{content:"a,"}/*!sc*/
</style>
`;

exports[`ssr should return a generated React style element 1`] = `
Object {
  "dangerouslySetInnerHTML": Object {
    "__html": "body{background:papayawhip;}/*!sc*/
data-styled.g1[id=\\"sc-global-a1\\"]{content:\\"sc-global-a1,\\"}/*!sc*/
.c{color:red;}/*!sc*/
data-styled.g2[id=\\"sc-b\\"]{content:\\"c,\\"}/*!sc*/
",
  },
  "data-styled": "",
  "data-styled-version": "JEST_MOCK_VERSION",
}
`;

exports[`ssr should throw if getStyleElement is called after interleaveWithNodeStream is called 1`] = `
"Can't collect styles once you've consumed a \`ServerStyleSheet\`'s styles! \`ServerStyleSheet\` is a one off instance for each server-side render cycle.

- Are you trying to reuse it across renders?
- Are you accidentally calling collectStyles twice?"
`;

exports[`ssr should throw if getStyleElement is called after streaming is complete 1`] = `
<style data-styled="true"
       data-styled-version="JEST_MOCK_VERSION"
>
  body{background:papayawhip;}/*!sc*/
data-styled.g1[id="sc-global-a1"]{content:"sc-global-a1,"}/*!sc*/
.c{color:red;}/*!sc*/
data-styled.g2[id="sc-b"]{content:"c,"}/*!sc*/
</style>
<h1 class="sc-b c">
  Hello SSR!
</h1>
`;

exports[`ssr should throw if getStyleElement is called after streaming is complete 2`] = `
"Can't collect styles once you've consumed a \`ServerStyleSheet\`'s styles! \`ServerStyleSheet\` is a one off instance for each server-side render cycle.

- Are you trying to reuse it across renders?
- Are you accidentally calling collectStyles twice?"
`;

exports[`ssr should throw if getStyleTags is called after interleaveWithNodeStream is called 1`] = `
"Can't collect styles once you've consumed a \`ServerStyleSheet\`'s styles! \`ServerStyleSheet\` is a one off instance for each server-side render cycle.

- Are you trying to reuse it across renders?
- Are you accidentally calling collectStyles twice?"
`;

exports[`ssr should throw if getStyleTags is called after streaming is complete 1`] = `
<style data-styled="true"
       data-styled-version="JEST_MOCK_VERSION"
>
  body{background:papayawhip;}/*!sc*/
data-styled.g1[id="sc-global-a1"]{content:"sc-global-a1,"}/*!sc*/
.c{color:red;}/*!sc*/
data-styled.g2[id="sc-b"]{content:"c,"}/*!sc*/
</style>
<h1 class="sc-b c">
  Hello SSR!
</h1>
`;

exports[`ssr should throw if getStyleTags is called after streaming is complete 2`] = `
"Can't collect styles once you've consumed a \`ServerStyleSheet\`'s styles! \`ServerStyleSheet\` is a one off instance for each server-side render cycle.

- Are you trying to reuse it across renders?
- Are you accidentally calling collectStyles twice?"
`;

exports[`ssr should throw if interleaveWithNodeStream is called twice 1`] = `
"Can't collect styles once you've consumed a \`ServerStyleSheet\`'s styles! \`ServerStyleSheet\` is a one off instance for each server-side render cycle.

- Are you trying to reuse it across renders?
- Are you accidentally calling collectStyles twice?"
`;
